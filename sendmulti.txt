#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

struct in_addr localInterface;
struct sockaddr_in groupSock;
int sd;
int datalen;
char databuf[1024];

int main (int argc, char *argv[])
{
    /* Create a datagram socket */
    sd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sd < 0) {
        perror("opening datagram socket");
        exit(1);
    }

    /* Initialize group sockaddr structure */
    memset((char *) &groupSock, 0, sizeof(groupSock));
    groupSock.sin_family = AF_INET;
    groupSock.sin_addr.s_addr = inet_addr("225.1.1.1");  // Multicast address
    groupSock.sin_port = htons(5555);  // Port

    /* Disable loopback to not receive our own datagrams */
    char loopch = 0;
    if (setsockopt(sd, IPPROTO_IP, IP_MULTICAST_LOOP, &loopch, sizeof(loopch)) < 0) {
        perror("setting IP_MULTICAST_LOOP");
        close(sd);
        exit(1);
    }

    /* Set the local interface to send the multicast datagrams */
    localInterface.s_addr = inet_addr("127.0.0.1");  // Use loopback address for testing
    if (setsockopt(sd, IPPROTO_IP, IP_MULTICAST_IF, &localInterface, sizeof(localInterface)) < 0) {
        perror("setting local interface");
        close(sd);
        exit(1);
    }

    /* Fill data buffer */
    strncpy(databuf, "Hello, Multicast!", sizeof(databuf));
    datalen = strlen(databuf);

    /* Send a message to the multicast group */
    if (sendto(sd, databuf, datalen, 0, (struct sockaddr*)&groupSock, sizeof(groupSock)) < 0) {
        perror("sending datagram message");
        close(sd);
        exit(1);
    }

    printf("Message sent: %s\n", databuf);
    
    /* Close the socket */
    close(sd);
    return 0;
}