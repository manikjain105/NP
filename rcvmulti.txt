#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

struct sockaddr_in localSock;
struct ip_mreq group;
int sd;
int datalen;
char databuf[1024];

int main (int argc, char *argv[])
{
    /* Create a datagram socket */
    sd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sd < 0) {
        perror("opening datagram socket");
        exit(1);
    }

    /* Enable SO_REUSEADDR */
    int reuse = 1;
    if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) < 0) {
        perror("setting SO_REUSEADDR");
        close(sd);
        exit(1);
    }

    /* Bind to the port and IP address */
    memset((char *) &localSock, 0, sizeof(localSock));
    localSock.sin_family = AF_INET;
    localSock.sin_port = htons(5555);
    localSock.sin_addr.s_addr = INADDR_ANY;

    if (bind(sd, (struct sockaddr*)&localSock, sizeof(localSock)) < 0) {
        perror("binding datagram socket");
        close(sd);
        exit(1);
    }

    /* Join multicast group */
    group.imr_multiaddr.s_addr = inet_addr("225.1.1.1");  // Multicast address
    group.imr_interface.s_addr = inet_addr("127.0.0.1");  // Use loopback address for testing
    if (setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &group, sizeof(group)) < 0) {
        perror("adding multicast group");
        close(sd);
        exit(1);
    }

    /* Receive data from the socket */
    while (1) {
        datalen = sizeof(databuf);
        int nbytes = recvfrom(sd, databuf, datalen, 0, NULL, 0);
        if (nbytes < 0) {
            perror("reading datagram message");
            close(sd);
            exit(1);
        }

        /* Null-terminate the received data */
        databuf[nbytes] = '\0';
        printf("Received message: %s\n", databuf);
    }

    /* Close the socket */
    close(sd);
    return 0;
}